[{"G:\\Diplom\\IspoQueue\\ClientApp\\src\\serviceWorkerRegistration.js":"1","G:\\Diplom\\IspoQueue\\ClientApp\\src\\reportWebVitals.js":"2","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Layout.js":"3","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\NavMenu.js":"4","G:\\Diplom\\IspoQueue\\ClientApp\\src\\index.tsx":"5","G:\\Diplom\\IspoQueue\\ClientApp\\src\\App.tsx":"6","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Counter.tsx":"7","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Home.tsx":"8","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Auth\\Login.tsx":"9","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Button\\index.tsx":"10","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Queue\\Submission\\index.tsx":"11","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Queue\\Consultations\\index.tsx":"12","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Admin\\index.tsx":"13","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Display\\index.tsx":"14","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Operator\\index.tsx":"15","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Queue\\index.tsx":"16","G:\\Diplom\\IspoQueue\\ClientApp\\src\\services\\getQueue.ts":"17","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\FetchData.tsx":"18"},{"size":5201,"mtime":1714134662563,"results":"19","hashOfConfig":"20"},{"size":377,"mtime":1714134662558,"results":"21","hashOfConfig":"20"},{"size":383,"mtime":1714134662389,"results":"22","hashOfConfig":"20"},{"size":1519,"mtime":1714212605517,"results":"23","hashOfConfig":"20"},{"size":1151,"mtime":1714249920517,"results":"24","hashOfConfig":"20"},{"size":876,"mtime":1715438631529,"results":"25","hashOfConfig":"20"},{"size":555,"mtime":1714137416773,"results":"26","hashOfConfig":"20"},{"size":1076,"mtime":1715434513962,"results":"27","hashOfConfig":"20"},{"size":2705,"mtime":1714249136185,"results":"28","hashOfConfig":"20"},{"size":1734,"mtime":1714752838951,"results":"29","hashOfConfig":"20"},{"size":1186,"mtime":1714249106993,"results":"30","hashOfConfig":"20"},{"size":1213,"mtime":1714665699449,"results":"31","hashOfConfig":"20"},{"size":7662,"mtime":1714727828082,"results":"32","hashOfConfig":"20"},{"size":1913,"mtime":1715464055129,"results":"33","hashOfConfig":"20"},{"size":3663,"mtime":1714774416173,"results":"34","hashOfConfig":"20"},{"size":884,"mtime":1715434274055,"results":"35","hashOfConfig":"20"},{"size":281,"mtime":1715445569971,"results":"36","hashOfConfig":"20"},{"size":1866,"mtime":1715463771317,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1g57h17",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"G:\\Diplom\\IspoQueue\\ClientApp\\src\\serviceWorkerRegistration.js",[],[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\reportWebVitals.js",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Layout.js",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\NavMenu.js",["99","100","101"],[],"import React, { Component } from 'react';\r\nimport { Collapse, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\nimport { Image } from 'antd';\r\nimport IspoLogo from '../public/IspoLogo.svg';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" container light>\r\n          <a href='/'>\r\n            <img className='logo' src={IspoLogo}/>\r\n          </a>\r\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n          <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n            <ul className=\"navbar-nav flex-grow\">\r\n              <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to=\"/login\">Личный кабинет</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n              </NavItem>\r\n            </ul>\r\n          </Collapse>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","G:\\Diplom\\IspoQueue\\ClientApp\\src\\index.tsx",[],[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\App.tsx",["102"],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Counter.tsx",[],[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Home.tsx",["103","104","105","106"],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Auth\\Login.tsx",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Button\\index.tsx",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Queue\\Submission\\index.tsx",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Queue\\Consultations\\index.tsx",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Admin\\index.tsx",["107","108","109","110","111"],[],"import React, { ChangeEvent, useState } from 'react'\r\nimport { Container } from 'reactstrap'\r\nimport Add from '../../public/Add.svg'\r\nimport styles from './admin.module.css'\r\nimport { Flex, Form, FormProps, Input } from 'antd'\r\nimport Button from '../Button/index.tsx'\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n\r\ninterface Queue {\r\n    main: string;\r\n    name: string;\r\n}\r\n\r\nfunction Admin() {\r\n    const [user, setUser] = useState(false)\r\n    const [login, setLogin] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [role, setRole] = useState('');\r\n    const [cabinet, setCabinet] = useState('');\r\n    const [window, setWindow] = useState('');\r\n    const [queues, setQueues] = useState<string[]>([]);\r\n    const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({});\r\n    \r\n    const cities: Queue[] = [\r\n        { main: \"Подача документов\", name: 'Заполнение заявления в личном кабинете'},\r\n        { main: \"Подача документов\", name: 'Оформление личного дела',},\r\n        { main: \"Консультации\", name: 'Консультация по выбору специальностей' },\r\n        { main: \"Консультации\", name: 'Изменение приоритетов' },\r\n        {\r\n            main: \"Прием оригиналов документов об образовании/Выдача документов\",\r\n            name: 'Прием оригиналов документов об образовании/Выдача документов',\r\n        },\r\n    ];\r\n\r\n    const handleRoleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setRole(event.target.value);\r\n        if (event.target.value !== 'operator') {\r\n            // Если роль не оператор, сбрасываем значения\r\n            setQueues([]);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if (!login || !password || !role || (role === 'operator' && (!cabinet || !window))) {\r\n            setFormErrors({ login: !login ? 'Логин обязателен' : '', password: !password ? 'Пароль обязателен' : '', role: !role ? 'Роль обязательна' : '', cabinet: role === 'operator' && !cabinet ? 'Кабинет обязателен' : '', window: role === 'operator' && !window ? 'Окно обязательно' : '' });\r\n            return;\r\n        }\r\n        // Ваша логика отправки данных на сервер\r\n        console.log({ login, password, role, cabinet, window, queues });\r\n    };\r\n\r\n    function handleAddUser(): void {\r\n        setUser(!user)\r\n    }\r\n\r\n    function handleNumericInputChange(value: string, setter: React.Dispatch<React.SetStateAction<string>>): void {\r\n        const newValue = value.replace(/\\D/g, ''); // Удаляем все, кроме цифр\r\n        setter(newValue);\r\n    }\r\n\r\n    return (\r\n        <Container className='d-flex flex-column align-items-center justify-content-center'>\r\n            <h1>Панель управления</h1>\r\n            <Container className='p-0'>\r\n                <h3>Управление операторами</h3>\r\n                <img className={styles.image} src={Add} onClick={handleAddUser} width={60}></img>\r\n                {user && <form className={styles.addUserForm} onSubmit={handleSubmit}>\r\n                    <Flex justify='space-between'>\r\n                        <div className={styles.formGroup}>\r\n                            <label>Логин:</label>\r\n                            <input type=\"text\" value={login} onChange={(e) => setLogin(e.target.value)} />\r\n                            {formErrors.login && <span className={styles.error}>{formErrors.login}</span>}\r\n                        </div>\r\n                        <div className={styles.formGroup}>\r\n                            <label>Пароль:</label>\r\n                            <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                            {formErrors.password && <span className={styles.error}>{formErrors.password}</span>}\r\n                        </div>\r\n                        <div className={styles.formGroup}>\r\n                            <label>Роль:</label>\r\n                            <select title='Выберите роль' value={role} onChange={handleRoleChange}>\r\n                                <option value=\"applicant\">Терминал</option>\r\n                                <option value=\"operator\">Оператор</option>\r\n                                <option value=\"registrar\">Регистратор</option>\r\n                                <option value=\"administrator\">Администратор</option>\r\n                                <option value=\"display\">Дисплей</option>\r\n                            </select>\r\n                        </div>\r\n                    </Flex>\r\n\r\n                    {role === 'operator' && (\r\n                        <div className={styles.formGroup}>\r\n                            <Flex>\r\n                                <div className={styles.formGroup}>\r\n                                    <label>Кабинет:</label>\r\n                                    <input type=\"text\" inputMode='numeric' value={cabinet} onChange={(e) => handleNumericInputChange(e.target.value, setCabinet)} pattern=\"[0-9]*\" />\r\n                                    {formErrors.cabinet && <span className={styles.error}>{formErrors.cabinet}</span>}\r\n                                </div>\r\n                                <div className={styles.formGroup}>\r\n                                    <label>Окно:</label>\r\n                                    <input type=\"text\"\r\n                                        value={window}\r\n                                        onChange={(e) => handleNumericInputChange(e.target.value, setWindow)}\r\n                                        pattern=\"[0-9]*\"\r\n                                        inputMode=\"numeric\" />\r\n                                    {formErrors.window && <span className={styles.error}>{formErrors.window}</span>}\r\n\r\n                                </div>\r\n                            </Flex>\r\n                            <label>Очереди:</label>\r\n                            <Multiselect\r\n                                options={cities}\r\n                                groupBy=\"main\"\r\n                                onSelect={(selectedList) => setQueues(selectedList.map((queue: Queue) => queue.name))}\r\n                                displayValue=\"name\"\r\n                                placeholder='Выберите очередь'\r\n                                showCheckbox\r\n                                className={styles.multiSelectContainer}\r\n                                style={{\r\n                                    chips: {\r\n                                        background: '#319f42'\r\n                                    },\r\n                                    searchBox: {\r\n                                        border: 'none',\r\n                                        padding: '0'\r\n                                    }\r\n                                }}\r\n                            />\r\n\r\n\r\n                        </div>\r\n                    )}\r\n                    <Button submit>Добавить пользователя</Button>\r\n                </form>}\r\n\r\n            </Container>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Admin","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Display\\index.tsx",["112","113","114","115","116"],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Operator\\index.tsx",["117","118","119","120","121"],[],"import React, { useEffect, useState } from 'react'\r\nimport { Container } from 'reactstrap'\r\nimport Button from '../Button/index.tsx'\r\nimport NextImage from '../../public/Next.svg'\r\nimport styles from '../Display/display.module.css'\r\n\r\nfunction Operator() {\r\n    const [isTimerActive, setIsTimerActive] = useState(false);\r\n    const [remainingTime, setRemainingTime] = useState(10); // Время в секундах (2 минуты)\r\n    let data: { key: string, serivce: string, status: string }[] = [\r\n        { \"key\": \"П100\", \"serivce\": \"Заполнение заявления в личном кабинете\", \"status\": \"Завершен\" },\r\n        { \"key\": \"K200\", \"serivce\": \"Заполнение заявления в личном кабинете\", \"status\": \"Активен\" },\r\n        { \"key\": \"П200\", \"serivce\": \"Заполнение заявления в личном кабинете\", \"status\": \"В ожидании\" }\r\n    ];\r\n\r\n    const queue = data.length > 0 ? data.map((d) => {\r\n        return <tr key={d.key}>\r\n            <td>{d.key}</td>\r\n            <td>{d.serivce}</td>\r\n            <td className={d.status == \"Завершен\" ?\r\n                styles.completed : d.status == \"Активен\" ?\r\n                    styles.active : styles.waiting}>{d.status}</td>\r\n        </tr>\r\n    }) : <></>\r\n\r\n    const textNext = () => {\r\n        return <>\r\n            <p>Следуюший</p>\r\n            <img src={NextImage} width={40}></img>Б\r\n        </>\r\n    }\r\n\r\n    // Функция для запуска таймера\r\n    const startTimer = () => {\r\n        setIsTimerActive(true);\r\n        setRemainingTime(10); // Сброс времени на начальное значение\r\n    };\r\n\r\n    useEffect(() => {\r\n        let timerInterval;\r\n\r\n        // Если таймер активен и осталось время\r\n        if (isTimerActive && remainingTime > 0) {\r\n            // Уменьшаем время каждую секунду\r\n            timerInterval = setTimeout(() => {\r\n                setRemainingTime((prevTime) => prevTime - 1);\r\n            }, 1000);\r\n        } else {\r\n            // Если время вышло или таймер неактивен, очищаем интервал\r\n            clearInterval(timerInterval);\r\n            setIsTimerActive(false);\r\n        }\r\n\r\n        // Очищаем интервал при размонтировании компонента\r\n        return () => clearInterval(timerInterval);\r\n    }, [isTimerActive, remainingTime]);\r\n\r\n    return (\r\n        <Container>\r\n            <h1>Вы опреатор который работает с очередю:</h1>\r\n            <ul>\r\n                <li>очередь 1</li>\r\n            </ul>\r\n            <Container className='w-50 m-0 p-0'>\r\n                <Button onClick={!isTimerActive ? startTimer : undefined} next>\r\n                    {isTimerActive ? `Осталось времени: ${remainingTime} сек.` : `Следуюший`}\r\n                    {!isTimerActive && <img src={NextImage} width={35} className='mx-2'></img>}\r\n                </Button>\r\n            </Container>\r\n            <table className={styles.table}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>№ талона</th>\r\n                            <th>Кабинет</th>\r\n                            <th>Окно</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {queue}\r\n                    </tbody>\r\n                </table>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Operator","G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\Queue\\index.tsx",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\services\\getQueue.ts",[],[],"G:\\Diplom\\IspoQueue\\ClientApp\\src\\components\\FetchData.tsx",[],[],[],{"ruleId":"122","severity":1,"message":"123","line":2,"column":28,"nodeType":"124","messageId":"125","endLine":2,"endColumn":39},{"ruleId":"122","severity":1,"message":"126","line":5,"column":10,"nodeType":"124","messageId":"125","endLine":5,"endColumn":15},{"ruleId":"127","severity":1,"message":"128","line":31,"column":13,"nodeType":"129","endLine":31,"endColumn":51},{"ruleId":"130","severity":1,"message":"131","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"132","line":3,"column":8,"nodeType":"124","messageId":"125","endLine":3,"endColumn":14},{"ruleId":"130","severity":1,"message":"133","line":4,"column":10,"nodeType":"124","messageId":"125","endLine":4,"endColumn":19},{"ruleId":"130","severity":1,"message":"134","line":5,"column":10,"nodeType":"124","messageId":"125","endLine":5,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":26,"column":12,"nodeType":"137","endLine":26,"endColumn":21},{"ruleId":"130","severity":1,"message":"138","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":28},{"ruleId":"130","severity":1,"message":"139","line":5,"column":16,"nodeType":"124","messageId":"125","endLine":5,"endColumn":20},{"ruleId":"130","severity":1,"message":"140","line":5,"column":22,"nodeType":"124","messageId":"125","endLine":5,"endColumn":31},{"ruleId":"130","severity":1,"message":"141","line":5,"column":33,"nodeType":"124","messageId":"125","endLine":5,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":67,"column":17,"nodeType":"129","endLine":67,"endColumn":92},{"ruleId":"130","severity":1,"message":"142","line":2,"column":21,"nodeType":"124","messageId":"125","endLine":2,"endColumn":26},{"ruleId":"130","severity":1,"message":"143","line":4,"column":8,"nodeType":"124","messageId":"125","endLine":4,"endColumn":18},{"ruleId":"130","severity":1,"message":"144","line":7,"column":6,"nodeType":"124","messageId":"125","endLine":7,"endColumn":11},{"ruleId":"130","severity":1,"message":"145","line":12,"column":9,"nodeType":"124","messageId":"125","endLine":12,"endColumn":65},{"ruleId":"146","severity":1,"message":"147","line":35,"column":21,"nodeType":"148","messageId":"149","endLine":35,"endColumn":23},{"ruleId":"146","severity":1,"message":"150","line":20,"column":37,"nodeType":"148","messageId":"149","endLine":20,"endColumn":39},{"ruleId":"146","severity":1,"message":"150","line":21,"column":45,"nodeType":"148","messageId":"149","endLine":21,"endColumn":47},{"ruleId":"130","severity":1,"message":"151","line":26,"column":11,"nodeType":"124","messageId":"125","endLine":26,"endColumn":19},{"ruleId":"127","severity":1,"message":"128","line":29,"column":13,"nodeType":"129","endLine":29,"endColumn":45},{"ruleId":"127","severity":1,"message":"128","line":67,"column":40,"nodeType":"129","endLine":67,"endColumn":89},"no-unused-vars","'NavbarBrand' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'Component' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'Flex' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'role' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'ChangeEvent' is defined but never used.","'Form' is defined but never used.","'FormProps' is defined but never used.","'Input' is defined but never used.","'Table' is defined but never used.","'fetchQueue' is defined but never used.","'Queue' is defined but never used.","'data' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'textNext' is assigned a value but never used."]