{"ast":null,"code":"var _jsxFileName = \"G:\\\\Diplom\\\\IspoQueue\\\\ClientApp\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // Здесь можно добавить логику для проверки авторизации пользователя\n  const isAuthenticated = false; // Пример: здесь должна быть логика проверки авторизации пользователя\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: isAuthenticated ? /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 30\n        }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Switch","Route","jsxDEV","_jsxDEV","App","isAuthenticated","children","path","LoginPage","fileName","_jsxFileName","lineNumber","columnNumber","Redirect","to","HomePage","_c","$RefreshReg$"],"sources":["G:/Diplom/IspoQueue/ClientApp/src/App.tsx"],"sourcesContent":["import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Login from './components/Auth/Login.tsx';\r\nimport Home from './components/Home.tsx';\r\n\r\nconst App = () => {\r\n  // Здесь можно добавить логику для проверки авторизации пользователя\r\n  const isAuthenticated = false; // Пример: здесь должна быть логика проверки авторизации пользователя\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/login\">\r\n          {/* Показываем страницу входа только если пользователь не авторизован */}\r\n          {!isAuthenticated ? <LoginPage /> : <Redirect to=\"/\" />}\r\n        </Route>\r\n        <Route path=\"/\">\r\n          {/* Показываем главную страницу только если пользователь авторизован */}\r\n          {isAuthenticated ? <HomePage /> : <Redirect to=\"/login\" />}\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1E,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB;EACA,MAAMC,eAAe,GAAG,KAAK,CAAC,CAAC;;EAE/B,oBACEF,OAAA,CAACJ,MAAM;IAAAO,QAAA,eACLH,OAAA,CAACH,MAAM;MAAAM,QAAA,gBACLH,OAAA,CAACF,KAAK;QAACM,IAAI,EAAC,QAAQ;QAAAD,QAAA,EAEjB,CAACD,eAAe,gBAAGF,OAAA,CAACK,SAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGT,OAAA,CAACU,QAAQ;UAACC,EAAE,EAAC;QAAG;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACRT,OAAA,CAACF,KAAK;QAACM,IAAI,EAAC,GAAG;QAAAD,QAAA,EAEZD,eAAe,gBAAGF,OAAA,CAACY,QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGT,OAAA,CAACU,QAAQ;UAACC,EAAE,EAAC;QAAQ;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACI,EAAA,GAlBIZ,GAAG;AAoBT,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}