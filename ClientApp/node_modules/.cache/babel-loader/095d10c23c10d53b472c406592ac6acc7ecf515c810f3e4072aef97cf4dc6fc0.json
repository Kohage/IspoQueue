{"ast":null,"code":"import _slicedToArray from \"G:/Diplom/IspoQueue/ClientApp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nvar INIT_COLOR_REF = {};\nfunction hasValue(value) {\n  return value !== undefined;\n}\nvar useColorState = function useColorState(defaultStateValue, option) {\n  var defaultValue = option.defaultValue,\n    value = option.value;\n  var prevColor = useRef(generateColor(''));\n  var _useState = useState(function () {\n      var mergedState;\n      if (hasValue(value)) {\n        mergedState = value;\n      } else if (hasValue(defaultValue)) {\n        mergedState = defaultValue;\n      } else {\n        mergedState = defaultStateValue;\n      }\n      var color = generateColor(mergedState || '');\n      prevColor.current = color;\n      return color;\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    colorValue = _useState2[0],\n    _setColorValue = _useState2[1];\n  var setColorValue = function setColorValue(color) {\n    _setColorValue(color);\n    prevColor.current = color;\n  };\n  var prevValue = useRef(INIT_COLOR_REF);\n  useEffect(function () {\n    // `useEffect` will be executed twice in strict mode even if the deps are the same\n    // So we compare the value manually to avoid unnecessary update\n    if (prevValue.current === value) {\n      return;\n    }\n    prevValue.current = value;\n    if (hasValue(value)) {\n      var newColor = generateColor(value || '');\n      if (prevColor.current.cleared === true) {\n        newColor.cleared = 'controlled';\n      }\n      setColorValue(newColor);\n    }\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\nexport default useColorState;","map":{"version":3,"names":["useEffect","useRef","useState","generateColor","INIT_COLOR_REF","hasValue","value","undefined","useColorState","defaultStateValue","option","defaultValue","prevColor","_useState","mergedState","color","current","_useState2","_slicedToArray","colorValue","_setColorValue","setColorValue","prevValue","newColor","cleared"],"sources":["G:/Diplom/IspoQueue/clientapp/node_modules/antd/es/color-picker/hooks/useColorState.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nconst INIT_COLOR_REF = {};\nfunction hasValue(value) {\n  return value !== undefined;\n}\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n  const setColorValue = color => {\n    _setColorValue(color);\n    prevColor.current = color;\n  };\n  const prevValue = useRef(INIT_COLOR_REF);\n  useEffect(() => {\n    // `useEffect` will be executed twice in strict mode even if the deps are the same\n    // So we compare the value manually to avoid unnecessary update\n    if (prevValue.current === value) {\n      return;\n    }\n    prevValue.current = value;\n    if (hasValue(value)) {\n      const newColor = generateColor(value || '');\n      if (prevColor.current.cleared === true) {\n        newColor.cleared = 'controlled';\n      }\n      setColorValue(newColor);\n    }\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\nexport default useColorState;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,aAAa,QAAQ,SAAS;AACvC,IAAMC,cAAc,GAAG,CAAC,CAAC;AACzB,SAASC,QAAQA,CAACC,KAAK,EAAE;EACvB,OAAOA,KAAK,KAAKC,SAAS;AAC5B;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,iBAAiB,EAAEC,MAAM,EAAK;EACnD,IACEC,YAAY,GAEVD,MAAM,CAFRC,YAAY;IACZL,KAAK,GACHI,MAAM,CADRJ,KAAK;EAEP,IAAMM,SAAS,GAAGX,MAAM,CAACE,aAAa,CAAC,EAAE,CAAC,CAAC;EAC3C,IAAAU,SAAA,GAAqCX,QAAQ,CAAC,YAAM;MAClD,IAAIY,WAAW;MACf,IAAIT,QAAQ,CAACC,KAAK,CAAC,EAAE;QACnBQ,WAAW,GAAGR,KAAK;MACrB,CAAC,MAAM,IAAID,QAAQ,CAACM,YAAY,CAAC,EAAE;QACjCG,WAAW,GAAGH,YAAY;MAC5B,CAAC,MAAM;QACLG,WAAW,GAAGL,iBAAiB;MACjC;MACA,IAAMM,KAAK,GAAGZ,aAAa,CAACW,WAAW,IAAI,EAAE,CAAC;MAC9CF,SAAS,CAACI,OAAO,GAAGD,KAAK;MACzB,OAAOA,KAAK;IACd,CAAC,CAAC;IAAAE,UAAA,GAAAC,cAAA,CAAAL,SAAA;IAZKM,UAAU,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAajC,IAAMI,aAAa,GAAG,SAAhBA,aAAaA,CAAGN,KAAK,EAAI;IAC7BK,cAAc,CAACL,KAAK,CAAC;IACrBH,SAAS,CAACI,OAAO,GAAGD,KAAK;EAC3B,CAAC;EACD,IAAMO,SAAS,GAAGrB,MAAM,CAACG,cAAc,CAAC;EACxCJ,SAAS,CAAC,YAAM;IACd;IACA;IACA,IAAIsB,SAAS,CAACN,OAAO,KAAKV,KAAK,EAAE;MAC/B;IACF;IACAgB,SAAS,CAACN,OAAO,GAAGV,KAAK;IACzB,IAAID,QAAQ,CAACC,KAAK,CAAC,EAAE;MACnB,IAAMiB,QAAQ,GAAGpB,aAAa,CAACG,KAAK,IAAI,EAAE,CAAC;MAC3C,IAAIM,SAAS,CAACI,OAAO,CAACQ,OAAO,KAAK,IAAI,EAAE;QACtCD,QAAQ,CAACC,OAAO,GAAG,YAAY;MACjC;MACAH,aAAa,CAACE,QAAQ,CAAC;IACzB;EACF,CAAC,EAAE,CAACjB,KAAK,CAAC,CAAC;EACX,OAAO,CAACa,UAAU,EAAEE,aAAa,EAAET,SAAS,CAAC;AAC/C,CAAC;AACD,eAAeJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}