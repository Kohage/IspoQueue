{"ast":null,"code":"var _jsxFileName = \"G:\\\\Diplom\\\\IspoQueue\\\\ClientApp\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // Здесь можно добавить логику для проверки авторизации пользователя\n  const isAuthenticated = false; // Пример: здесь должна быть логика проверки авторизации пользователя\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/login\",\n      children: !isAuthenticated && /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Route","jsxDEV","_jsxDEV","App","isAuthenticated","children","exact","path","LoginPage","fileName","_jsxFileName","lineNumber","columnNumber","HomePage","_c","$RefreshReg$"],"sources":["G:/Diplom/IspoQueue/ClientApp/src/App.tsx"],"sourcesContent":["import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Login from './components/Auth/Login.tsx';\r\nimport Home from './components/Home.tsx';\r\n\r\nconst App = () => {\r\n  // Здесь можно добавить логику для проверки авторизации пользователя\r\n  const isAuthenticated = false; // Пример: здесь должна быть логика проверки авторизации пользователя\r\n\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\">\r\n        {/* Показываем страницу входа, если пользователь не авторизован */}\r\n        {!isAuthenticated ? <LoginPage /> : <HomePage />}\r\n      </Route>\r\n      <Route exact path=\"/login\">\r\n        {/* Показываем страницу входа всегда, если пользователь не авторизован */}\r\n        {!isAuthenticated && <LoginPage />}\r\n      </Route>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAUC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1E,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB;EACA,MAAMC,eAAe,GAAG,KAAK,CAAC,CAAC;;EAE/B,oBACEF,OAAA,CAACH,MAAM;IAAAM,QAAA,gBACLH,OAAA,CAACF,KAAK;MAACM,KAAK;MAACC,IAAI,EAAC,GAAG;MAAAF,QAAA,EAElB,CAACD,eAAe,gBAAGF,OAAA,CAACM,SAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAAGV,OAAA,CAACW,QAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACRV,OAAA,CAACF,KAAK;MAACM,KAAK;MAACC,IAAI,EAAC,QAAQ;MAAAF,QAAA,EAEvB,CAACD,eAAe,iBAAIF,OAAA,CAACM,SAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEb,CAAC;AAACE,EAAA,GAhBIX,GAAG;AAkBT,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}