{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"G:/Diplom/IspoQueue/ClientApp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as React from 'react';\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport TransButton from '../../_util/transButton';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\nexport default function CopyBtn(props) {\n  var _classNames;\n  var prefixCls = props.prefixCls,\n    copied = props.copied,\n    _props$locale = props.locale,\n    locale = _props$locale === void 0 ? {} : _props$locale,\n    onCopy = props.onCopy,\n    iconOnly = props.iconOnly,\n    tooltips = props.tooltips,\n    icon = props.icon,\n    loading = props.loading;\n  var tooltipNodes = toList(tooltips);\n  var iconNodes = toList(icon);\n  var copiedText = locale.copied,\n    copyText = locale.copy;\n  var copyTitle = copied ? getNode(tooltipNodes[1], copiedText) : getNode(tooltipNodes[0], copyText);\n  var systemStr = copied ? copiedText : copyText;\n  var ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    key: \"copy\",\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(TransButton, {\n    className: classNames(\"\".concat(prefixCls, \"-copy\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-copy-success\"), copied), _defineProperty(_classNames, \"\".concat(prefixCls, \"-copy-icon-only\"), iconOnly), _classNames)),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], loading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n}","map":{"version":3,"names":["_defineProperty","React","CheckOutlined","CopyOutlined","LoadingOutlined","classNames","TransButton","Tooltip","getNode","toList","CopyBtn","props","_classNames","prefixCls","copied","_props$locale","locale","onCopy","iconOnly","tooltips","icon","loading","tooltipNodes","iconNodes","copiedText","copyText","copy","copyTitle","systemStr","ariaLabel","createElement","key","title","className","concat","onClick"],"sources":["G:/Diplom/IspoQueue/clientapp/node_modules/antd/es/typography/Base/CopyBtn.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport TransButton from '../../_util/transButton';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\nexport default function CopyBtn(props) {\n  const {\n    prefixCls,\n    copied,\n    locale = {},\n    onCopy,\n    iconOnly,\n    tooltips,\n    icon,\n    loading\n  } = props;\n  const tooltipNodes = toList(tooltips);\n  const iconNodes = toList(icon);\n  const {\n    copied: copiedText,\n    copy: copyText\n  } = locale;\n  const copyTitle = copied ? getNode(tooltipNodes[1], copiedText) : getNode(tooltipNodes[0], copyText);\n  const systemStr = copied ? copiedText : copyText;\n  const ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    key: \"copy\",\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(TransButton, {\n    className: classNames(`${prefixCls}-copy`, {\n      [`${prefixCls}-copy-success`]: copied,\n      [`${prefixCls}-copy-icon-only`]: iconOnly\n    }),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], loading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n}"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,eAAA;AAEb,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,YAAY,MAAM,yCAAyC;AAClE,OAAOC,eAAe,MAAM,4CAA4C;AACxE,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,OAAO,MAAM,eAAe;AACnC,SAASC,OAAO,EAAEC,MAAM,QAAQ,QAAQ;AACxC,eAAe,SAASC,OAAOA,CAACC,KAAK,EAAE;EAAA,IAAAC,WAAA;EACrC,IACEC,SAAS,GAQPF,KAAK,CARPE,SAAS;IACTC,MAAM,GAOJH,KAAK,CAPPG,MAAM;IAAAC,aAAA,GAOJJ,KAAK,CANPK,MAAM;IAANA,MAAM,GAAAD,aAAA,cAAG,CAAC,CAAC,GAAAA,aAAA;IACXE,MAAM,GAKJN,KAAK,CALPM,MAAM;IACNC,QAAQ,GAINP,KAAK,CAJPO,QAAQ;IACRC,QAAQ,GAGNR,KAAK,CAHPQ,QAAQ;IACRC,IAAI,GAEFT,KAAK,CAFPS,IAAI;IACJC,OAAO,GACLV,KAAK,CADPU,OAAO;EAET,IAAMC,YAAY,GAAGb,MAAM,CAACU,QAAQ,CAAC;EACrC,IAAMI,SAAS,GAAGd,MAAM,CAACW,IAAI,CAAC;EAC9B,IACUI,UAAU,GAEhBR,MAAM,CAFRF,MAAM;IACAW,QAAQ,GACZT,MAAM,CADRU,IAAI;EAEN,IAAMC,SAAS,GAAGb,MAAM,GAAGN,OAAO,CAACc,YAAY,CAAC,CAAC,CAAC,EAAEE,UAAU,CAAC,GAAGhB,OAAO,CAACc,YAAY,CAAC,CAAC,CAAC,EAAEG,QAAQ,CAAC;EACpG,IAAMG,SAAS,GAAGd,MAAM,GAAGU,UAAU,GAAGC,QAAQ;EAChD,IAAMI,SAAS,GAAG,OAAOF,SAAS,KAAK,QAAQ,GAAGA,SAAS,GAAGC,SAAS;EACvE,OAAO,aAAa3B,KAAK,CAAC6B,aAAa,CAACvB,OAAO,EAAE;IAC/CwB,GAAG,EAAE,MAAM;IACXC,KAAK,EAAEL;EACT,CAAC,EAAE,aAAa1B,KAAK,CAAC6B,aAAa,CAACxB,WAAW,EAAE;IAC/C2B,SAAS,EAAE5B,UAAU,IAAA6B,MAAA,CAAIrB,SAAS,aAAAD,WAAA,OAAAZ,eAAA,CAAAY,WAAA,KAAAsB,MAAA,CAC5BrB,SAAS,oBAAkBC,MAAM,GAAAd,eAAA,CAAAY,WAAA,KAAAsB,MAAA,CACjCrB,SAAS,sBAAoBK,QAAQ,GAAAN,WAAA,CAC1C,CAAC;IACFuB,OAAO,EAAElB,MAAM;IACf,YAAY,EAAEY;EAChB,CAAC,EAAEf,MAAM,GAAGN,OAAO,CAACe,SAAS,CAAC,CAAC,CAAC,EAAE,aAAatB,KAAK,CAAC6B,aAAa,CAAC5B,aAAa,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,GAAGM,OAAO,CAACe,SAAS,CAAC,CAAC,CAAC,EAAEF,OAAO,GAAG,aAAapB,KAAK,CAAC6B,aAAa,CAAC1B,eAAe,EAAE,IAAI,CAAC,GAAG,aAAaH,KAAK,CAAC6B,aAAa,CAAC3B,YAAY,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1P","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}