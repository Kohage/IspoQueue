// <auto-generated />
using System;
using IspoQueue.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IspoQueue.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240602224057_InitAll")]
    partial class InitAll
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IspoQueue.DAL.Models.Cabinet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cabinets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("586c3e9d-870f-4242-b985-37f6b146360d"),
                            Name = "110"
                        },
                        new
                        {
                            Id = new Guid("35153787-5403-4a4e-a645-d3a254c6d153"),
                            Name = "113"
                        },
                        new
                        {
                            Id = new Guid("8dce902d-483c-4a90-8541-4c9da65ae723"),
                            Name = "115"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.ServiceToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesToRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df265716-5f02-4bf3-abd9-5e567a092cad"),
                            RoleId = new Guid("6a2f9903-d519-4d6a-9862-d69a3efe4d07"),
                            ServiceId = 1
                        },
                        new
                        {
                            Id = new Guid("cd975651-865b-49fc-bc5e-f44b75751914"),
                            RoleId = new Guid("e15b6623-69c6-4292-b190-76c83bd3e80f"),
                            ServiceId = 2
                        },
                        new
                        {
                            Id = new Guid("31e3cfd3-db6c-498f-9c6d-efff7b1034be"),
                            RoleId = new Guid("4c0eea7d-bb41-4a4d-b365-1be165c1aaa4"),
                            ServiceId = 3
                        },
                        new
                        {
                            Id = new Guid("f251caa0-befe-40cb-888a-f01c917158f3"),
                            RoleId = new Guid("858e5a7f-434b-4172-a51e-0b427d36b30d"),
                            ServiceId = 4
                        },
                        new
                        {
                            Id = new Guid("7715417a-f61a-425a-b7cf-b5a1c6cb4db8"),
                            RoleId = new Guid("3aa7f4c3-f11c-4cd6-9651-161f29ddf40e"),
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserToRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3546666e-c224-4158-88f6-f928c62e0d7f"),
                            RoleId = new Guid("0bbf7940-2792-4a8e-bdd8-8cb25dbe83d3"),
                            UserId = new Guid("0149e056-cdb6-44db-82d0-4a486f831fc2")
                        },
                        new
                        {
                            Id = new Guid("f61193f4-b67b-40c2-a378-1c862ec1156a"),
                            RoleId = new Guid("6a2f9903-d519-4d6a-9862-d69a3efe4d07"),
                            UserId = new Guid("f20f37d8-af92-4104-b594-51a64ab7a921")
                        },
                        new
                        {
                            Id = new Guid("e8bf576c-6a76-4a31-9a24-9e02fecfefd8"),
                            RoleId = new Guid("e15b6623-69c6-4292-b190-76c83bd3e80f"),
                            UserId = new Guid("04ff2673-3e50-4bd7-942a-2758df8b4f35")
                        },
                        new
                        {
                            Id = new Guid("8205a469-e7cd-49a6-ac7a-22c72d145613"),
                            RoleId = new Guid("4c0eea7d-bb41-4a4d-b365-1be165c1aaa4"),
                            UserId = new Guid("81eed72f-50a3-4dc9-a2aa-bd35f7af66ba")
                        },
                        new
                        {
                            Id = new Guid("036d429c-1934-4dba-b1e9-d308d817d4b3"),
                            RoleId = new Guid("3aa7f4c3-f11c-4cd6-9651-161f29ddf40e"),
                            UserId = new Guid("fe092868-637a-455e-b997-500b98359d2b")
                        },
                        new
                        {
                            Id = new Guid("917f6fbf-4506-4ac0-aeb3-01b0578fa0c9"),
                            RoleId = new Guid("858e5a7f-434b-4172-a51e-0b427d36b30d"),
                            UserId = new Guid("c64a45e7-3527-410b-a0fa-ff602cb83cba")
                        },
                        new
                        {
                            Id = new Guid("4a42e547-ef34-474f-844e-9d1f12e9be93"),
                            RoleId = new Guid("99becfd1-2829-4d21-b953-db96570e7056"),
                            UserId = new Guid("74c55983-709b-4d7e-8f23-8fc54611f620")
                        },
                        new
                        {
                            Id = new Guid("47bf2861-93f6-4cb2-af8d-ab77a7f09ce4"),
                            RoleId = new Guid("59a08df2-43ad-47d5-bec0-9c4e1a36a4a0"),
                            UserId = new Guid("7d51ab8d-d815-4957-8a59-3aaee43cebfe")
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToWindow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WindowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WindowId");

                    b.ToTable("UserToWindows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f79a8093-1d65-4a72-910a-48d2099f6230"),
                            UserId = new Guid("f20f37d8-af92-4104-b594-51a64ab7a921"),
                            WindowId = new Guid("86b260d0-e6f0-400e-949d-ce14e3d8ec24")
                        },
                        new
                        {
                            Id = new Guid("1466bc71-76a6-4f79-8ea0-71b2a6836ed0"),
                            UserId = new Guid("04ff2673-3e50-4bd7-942a-2758df8b4f35"),
                            WindowId = new Guid("e83b153a-7e39-4b34-9989-b0b4b8bbe441")
                        },
                        new
                        {
                            Id = new Guid("6d81ba48-e2de-4538-bf6c-1923873e5ed9"),
                            UserId = new Guid("81eed72f-50a3-4dc9-a2aa-bd35f7af66ba"),
                            WindowId = new Guid("b987028e-94ee-469c-8510-24fce1404434")
                        },
                        new
                        {
                            Id = new Guid("aa059598-b93e-4ca9-9e15-be38b7973b54"),
                            UserId = new Guid("c64a45e7-3527-410b-a0fa-ff602cb83cba"),
                            WindowId = new Guid("3504fb37-a833-4f51-9635-9a3fa2dcacc8")
                        },
                        new
                        {
                            Id = new Guid("fdff3c50-db42-48ed-9a28-9215c97383a1"),
                            UserId = new Guid("fe092868-637a-455e-b997-500b98359d2b"),
                            WindowId = new Guid("296f45b2-042c-43f7-b072-1069b814c821")
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WindowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WindowId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59a08df2-43ad-47d5-bec0-9c4e1a36a4a0"),
                            Name = "Терминал"
                        },
                        new
                        {
                            Id = new Guid("0bbf7940-2792-4a8e-bdd8-8cb25dbe83d3"),
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = new Guid("99becfd1-2829-4d21-b953-db96570e7056"),
                            Name = "Дисплей"
                        },
                        new
                        {
                            Id = new Guid("6a2f9903-d519-4d6a-9862-d69a3efe4d07"),
                            Name = "Оператор-координатор"
                        },
                        new
                        {
                            Id = new Guid("4c0eea7d-bb41-4a4d-b365-1be165c1aaa4"),
                            Name = "Оператор-консультант"
                        },
                        new
                        {
                            Id = new Guid("858e5a7f-434b-4172-a51e-0b427d36b30d"),
                            Name = "Оператор-консультант приоритетов"
                        },
                        new
                        {
                            Id = new Guid("3aa7f4c3-f11c-4cd6-9651-161f29ddf40e"),
                            Name = "Оператор-секретарь"
                        },
                        new
                        {
                            Id = new Guid("e15b6623-69c6-4292-b190-76c83bd3e80f"),
                            Name = "Оператор-модератор"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityStr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityStr = "З",
                            Name = "Заполнение заявления в Личном кабинете абитуриента",
                            QueueName = "Подача документов"
                        },
                        new
                        {
                            Id = 2,
                            IdentityStr = "О",
                            Name = "Оформление личного дела абитуриента",
                            QueueName = "Подача документов"
                        },
                        new
                        {
                            Id = 3,
                            IdentityStr = "К",
                            Name = "Консультация по выбору специальностей",
                            QueueName = "Консультации"
                        },
                        new
                        {
                            Id = 4,
                            IdentityStr = "П",
                            Name = "Изменение приоритетов",
                            QueueName = "Консультации"
                        },
                        new
                        {
                            Id = 5,
                            IdentityStr = "Д",
                            Name = "Прием оригиналов документов об образовании/Выдача документов",
                            QueueName = "Прием оригиналов документов об образовании/Выдача документов"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "В ожидании"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Активен"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Завершен"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Отложен"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0149e056-cdb6-44db-82d0-4a486f831fc2"),
                            FirstName = "Иван",
                            Login = "admin",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            SecondName = "Иванов"
                        },
                        new
                        {
                            Id = new Guid("f20f37d8-af92-4104-b594-51a64ab7a921"),
                            FirstName = "Петр",
                            Login = "oper1",
                            PasswordHash = "4d71683ca038b374b94e1afc2a4c1ec8bf83e6d4ca52cb8f5e3ac702625df36c",
                            SecondName = "Петров"
                        },
                        new
                        {
                            Id = new Guid("04ff2673-3e50-4bd7-942a-2758df8b4f35"),
                            FirstName = "Ольга",
                            Login = "oper2",
                            PasswordHash = "633877dd80cc1d37cf127d6ada0f66c0e11b98743c22439d2e66f39c66e699b4",
                            SecondName = "Сидорова"
                        },
                        new
                        {
                            Id = new Guid("81eed72f-50a3-4dc9-a2aa-bd35f7af66ba"),
                            FirstName = "Мария",
                            Login = "oper3",
                            PasswordHash = "ceaaa4703e1fa8765f452535a52073c32953e630e4bef8db45a238d2017ae421",
                            SecondName = "Кузнецова"
                        },
                        new
                        {
                            Id = new Guid("c64a45e7-3527-410b-a0fa-ff602cb83cba"),
                            FirstName = "Елена",
                            Login = "oper4",
                            PasswordHash = "f53a77faffc92cad68ad596386d86c25d878a15e3fd62b9f4063526a7b5ebdcd",
                            SecondName = "Попова"
                        },
                        new
                        {
                            Id = new Guid("fe092868-637a-455e-b997-500b98359d2b"),
                            FirstName = "Татьяна",
                            Login = "oper5",
                            PasswordHash = "d971b2d8d3a10e1c969d7da50b9917baad2ba4989cfbd8c371f1fc0c06674496",
                            SecondName = "Сидорова"
                        },
                        new
                        {
                            Id = new Guid("74c55983-709b-4d7e-8f23-8fc54611f620"),
                            Login = "display",
                            PasswordHash = "dfbb889cf19bda82ed8deadf82de232979aa4ecc83238625c6453dc4c597b43a"
                        },
                        new
                        {
                            Id = new Guid("7d51ab8d-d815-4957-8a59-3aaee43cebfe"),
                            Login = "terminal",
                            PasswordHash = "4e686af7bdcc5ae005a247624fd8c7283257c2514f6b3ad2ff5d4cb6d95196e6"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Window", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CabinetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.ToTable("Windows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86b260d0-e6f0-400e-949d-ce14e3d8ec24"),
                            CabinetId = new Guid("586c3e9d-870f-4242-b985-37f6b146360d"),
                            IsActive = true,
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("e83b153a-7e39-4b34-9989-b0b4b8bbe441"),
                            CabinetId = new Guid("586c3e9d-870f-4242-b985-37f6b146360d"),
                            IsActive = false,
                            Name = "2"
                        },
                        new
                        {
                            Id = new Guid("3504fb37-a833-4f51-9635-9a3fa2dcacc8"),
                            CabinetId = new Guid("586c3e9d-870f-4242-b985-37f6b146360d"),
                            IsActive = true,
                            Name = "3"
                        },
                        new
                        {
                            Id = new Guid("a1e38c1a-cc2e-426f-aa4c-018c43134135"),
                            CabinetId = new Guid("586c3e9d-870f-4242-b985-37f6b146360d"),
                            IsActive = true,
                            Name = "4"
                        },
                        new
                        {
                            Id = new Guid("b987028e-94ee-469c-8510-24fce1404434"),
                            CabinetId = new Guid("35153787-5403-4a4e-a645-d3a254c6d153"),
                            IsActive = true,
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("296f45b2-042c-43f7-b072-1069b814c821"),
                            CabinetId = new Guid("8dce902d-483c-4a90-8541-4c9da65ae723"),
                            IsActive = true,
                            Name = "1"
                        },
                        new
                        {
                            Id = new Guid("ce96b024-dfee-4fed-a4b5-ee430d40ef64"),
                            CabinetId = new Guid("8dce902d-483c-4a90-8541-4c9da65ae723"),
                            IsActive = true,
                            Name = "2"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.ServiceToRole", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Role", "Role")
                        .WithMany("ServiceRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Service", "Service")
                        .WithMany("ServiceRoles")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToRole", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToWindow", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.User", "User")
                        .WithMany("UserWindows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Window", "Window")
                        .WithMany("UserWindows")
                        .HasForeignKey("WindowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Window");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Queue", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Service", "Service")
                        .WithMany("Queues")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Status", "Status")
                        .WithMany("Queues")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Window", "Window")
                        .WithMany("Queues")
                        .HasForeignKey("WindowId");

                    b.Navigation("Service");

                    b.Navigation("Status");

                    b.Navigation("Window");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Window", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Cabinet", "Cabinet")
                        .WithMany("Windows")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Cabinet", b =>
                {
                    b.Navigation("Windows");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Role", b =>
                {
                    b.Navigation("ServiceRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Service", b =>
                {
                    b.Navigation("Queues");

                    b.Navigation("ServiceRoles");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Status", b =>
                {
                    b.Navigation("Queues");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserWindows");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Window", b =>
                {
                    b.Navigation("Queues");

                    b.Navigation("UserWindows");
                });
#pragma warning restore 612, 618
        }
    }
}
