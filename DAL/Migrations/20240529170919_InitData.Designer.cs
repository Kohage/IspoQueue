// <auto-generated />
using System;
using IspoQueue.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IspoQueue.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240529170919_InitData")]
    partial class InitData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IspoQueue.DAL.Models.Cabinet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.ServiceToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesToRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("399b1110-ea98-41d0-b536-49bee9196e24"),
                            RoleId = new Guid("34b1956d-b8ae-4003-bf08-a78ec7178e12"),
                            ServiceId = 1
                        },
                        new
                        {
                            Id = new Guid("71c3d492-03a6-448b-adc3-00471b9cff31"),
                            RoleId = new Guid("350788fc-8773-4fec-bb0d-4efe35a6bf66"),
                            ServiceId = 2
                        },
                        new
                        {
                            Id = new Guid("3637a194-0d9a-4c43-8614-8d91bb5b441d"),
                            RoleId = new Guid("77604ee0-83ff-4d12-9989-0ff95b1d5c02"),
                            ServiceId = 3
                        },
                        new
                        {
                            Id = new Guid("17e7d1e2-8a4d-4270-87bd-f39ff010e549"),
                            RoleId = new Guid("773e52d5-29bb-4f0f-b9f0-a946f321f565"),
                            ServiceId = 4
                        },
                        new
                        {
                            Id = new Guid("a23c9c8f-8947-4694-a6d3-a29c527e7218"),
                            RoleId = new Guid("21bd063c-514f-4cdc-832e-6df81bf66231"),
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserToRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c864ecff-49dd-4c81-8ae3-0663ba8ff078"),
                            RoleId = new Guid("cc31abba-9b93-40e9-96e5-c18ecd54565f"),
                            UserId = new Guid("68041dff-c7dc-4f26-a4f0-efb852e62576")
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToWindow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WindowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WindowId");

                    b.ToTable("UserToWindows");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WindowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WindowId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("456321a9-e5e9-4743-b127-6bb4bb565960"),
                            Name = "Терминал"
                        },
                        new
                        {
                            Id = new Guid("cc31abba-9b93-40e9-96e5-c18ecd54565f"),
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = new Guid("37439009-a764-4d41-ad72-80e321b08d05"),
                            Name = "Дисплей"
                        },
                        new
                        {
                            Id = new Guid("34b1956d-b8ae-4003-bf08-a78ec7178e12"),
                            Name = "Оператор-координатор"
                        },
                        new
                        {
                            Id = new Guid("77604ee0-83ff-4d12-9989-0ff95b1d5c02"),
                            Name = "Оператор-консультант"
                        },
                        new
                        {
                            Id = new Guid("773e52d5-29bb-4f0f-b9f0-a946f321f565"),
                            Name = "Оператор-консультант приоритетов"
                        },
                        new
                        {
                            Id = new Guid("21bd063c-514f-4cdc-832e-6df81bf66231"),
                            Name = "Оператор-секретарь"
                        },
                        new
                        {
                            Id = new Guid("350788fc-8773-4fec-bb0d-4efe35a6bf66"),
                            Name = "Оператор-модератор"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityStr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityStr = "З",
                            Name = "Заполнение заявления в Личном кабинете абитуриента",
                            QueueName = "Подача документов"
                        },
                        new
                        {
                            Id = 2,
                            IdentityStr = "О",
                            Name = "Оформление личного дела абитуриента",
                            QueueName = "Подача документов"
                        },
                        new
                        {
                            Id = 3,
                            IdentityStr = "К",
                            Name = "Консультация по выбору специальностей",
                            QueueName = "Консультации"
                        },
                        new
                        {
                            Id = 4,
                            IdentityStr = "П",
                            Name = "Изменение приоритетов",
                            QueueName = "Консультации"
                        },
                        new
                        {
                            Id = 5,
                            IdentityStr = "Д",
                            Name = "Прием оригиналов документов об образовании/Выдача документов",
                            QueueName = "Прием оригиналов документов об образовании/Выдача документов"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "В ожидании"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Активен"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Завершен"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Отложен"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68041dff-c7dc-4f26-a4f0-efb852e62576"),
                            Login = "admin",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
                        });
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Window", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CabinetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.ToTable("Windows");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.ServiceToRole", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Role", "Role")
                        .WithMany("ServiceRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Service", "Service")
                        .WithMany("ServiceRoles")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToRole", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.MediateModel.UserToWindow", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.User", "User")
                        .WithMany("UserWindows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Window", "Window")
                        .WithMany("UserWindows")
                        .HasForeignKey("WindowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Window");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Queue", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Service", "Service")
                        .WithMany("Queues")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Status", "Status")
                        .WithMany("Queues")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IspoQueue.DAL.Models.Window", "Window")
                        .WithMany("Queues")
                        .HasForeignKey("WindowId");

                    b.Navigation("Service");

                    b.Navigation("Status");

                    b.Navigation("Window");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Window", b =>
                {
                    b.HasOne("IspoQueue.DAL.Models.Cabinet", "Cabinet")
                        .WithMany("Windows")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Cabinet", b =>
                {
                    b.Navigation("Windows");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Role", b =>
                {
                    b.Navigation("ServiceRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Service", b =>
                {
                    b.Navigation("Queues");

                    b.Navigation("ServiceRoles");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Status", b =>
                {
                    b.Navigation("Queues");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserWindows");
                });

            modelBuilder.Entity("IspoQueue.DAL.Models.Window", b =>
                {
                    b.Navigation("Queues");

                    b.Navigation("UserWindows");
                });
#pragma warning restore 612, 618
        }
    }
}
